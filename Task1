`timescale 1ns / 1ps

// ALU Module
module ALU (
    input [3:0] A,   // 4-bit input A
    input [3:0] B,   // 4-bit input B
    input [2:0] ALU_Sel, // 3-bit control signal
    output reg [3:0] ALU_Out // 4-bit output
);

always @(*) begin
    case (ALU_Sel)
        3'b000: ALU_Out = A + B;     // ADD
        3'b001: ALU_Out = A - B;     // SUB
        3'b010: ALU_Out = A & B;     // AND
        3'b011: ALU_Out = A | B;     // OR
        3'b100: ALU_Out = ~A;        // NOT (Only A is considered)
        default: ALU_Out = 4'b0000;  // Default case
    endcase
end

endmodule

// Testbench for ALU
module ALU_tb;
    reg [3:0] A, B;
    reg [2:0] ALU_Sel;
    wire [3:0] ALU_Out;

    // Instantiate ALU module
    ALU uut (
        .A(A),
        .B(B),
        .ALU_Sel(ALU_Sel),
        .ALU_Out(ALU_Out)
    );

    initial begin
        // Test cases
        A = 4'b0011; B = 4'b0001; ALU_Sel = 3'b000; #10; // ADD
        A = 4'b0100; B = 4'b0001; ALU_Sel = 3'b001; #10; // SUB
        A = 4'b1100; B = 4'b1010; ALU_Sel = 3'b010; #10; // AND
        A = 4'b1100; B = 4'b1010; ALU_Sel = 3'b011; #10; // OR
        A = 4'b1100; B = 4'bxxxx; ALU_Sel = 3'b100; #10; // NOT
        
        // End simulation
        $finish;
    end

    initial begin
        $monitor("Time=%0t | A=%b | B=%b | ALU_Sel=%b | ALU_Out=%b", 
                 $time, A, B, ALU_Sel, ALU_Out);
    end
endmodule

